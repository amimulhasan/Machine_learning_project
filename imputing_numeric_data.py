# -*- coding: utf-8 -*-
"""imputing_numeric_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/121DVOwOW8CQnP36DkAw1qwJFd5lpUlDe
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer

df=pd.read_csv('/content/titanic_toy.csv')

df.sample(9)

df.info()

df.isnull().mean()

x=df.drop(columns=['Survived'])
y=df['Survived']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=2)

x_train.shape,x_test.shape

x_train.isnull().mean()*100

mean_age=x_train['Age'].mean()
median_age=x_train['Age'].median()

mean_fare=x_train['Fare'].mean()
median_fare=x_train['Fare'].median()

x_train['Age_median']=x_train['Age'].fillna(median_age)
x_train['Age_mean']=x_train['Age'].fillna(mean_age)

x_train['Fare_median']=x_train['Fare'].fillna(median_age)
x_train['Fare_mean']=x_train['Fare'].fillna(mean_age)

x_train.shape

x_train.sample(9)

print('original Age variable varience:',x_train['Age'].var())
print('Age varience after median imputation:',x_train['Age_median'].var())
print('Age variance after mean imputation:',x_train['Age_mean'].var())


print('original fare variablevariance:',x_train['Fare'].var())
print('Fare variance after median imputation:',x_train['Fare_median'].var())
print('Fare variance after mean imputation:',x_train['Fare_mean'].var())

fig=plt.figure()
ax=fig.add_subplot(111)

# original variable distribution
x_train['Age'].plot(kind='kde',ax=ax)

# variable imputed with the median
x_train['Age_median'].plot(kind='kde',ax=ax,color='red')
# variable imputed with the mean
x_train['Age_mean'].plot(kind='kde',ax=ax,color='green')
# add Legends
lines, labels = ax.get_legend_handles_labels()
ax.legend(lines, labels, loc='best')

fig=plt.figure()
ax=fig.add_subplot(111)


x_train['Fare'].plot(kind='kde',ax=ax)

x_train['Fare_median'].plot(kind='kde',ax=ax,color='red')
x_train['Fare_mean'].plot(kind='kde',ax=ax,color='green')
lins,labels=ax.get_legend_handles_labels()
ax.legend(lines,labels,loc='best')

